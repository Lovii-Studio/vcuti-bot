"""BOT VCUTI"""
"""CREATE BY - TheLovii"""
"""TEAM - HALCYON TEAM"""
"""GITHUB - github.com/TheLovii TEAM GITHUB - github.com/Halcyon-Team"""

"""IMPORTS"""
import typing
import vkcoin
import random
import sqlite3 as sql
import ast
import time
from vkbottle import Bot, Message, keyboard_gen
from vkbottle.branch import Branch, ExitBranch

"""SETTINGS"""
owner_vkid = 0 # Your VKID
merchant = vkcoin.VKCoin(user_id=owner_vkid, # –í–∞—à ID –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å VKCoins
						 key='') # –ö–ª—é—á –∞–ø–∏ VKCoins

connection = sql.connect("vcuti_datab.db")
cc = connection.cursor()

"""KEYBOARDS"""
pvk_list = [[{'text': '100000', 'color': 'secondary'}, {'text': '500000', 'color': 'secondary'},
			 {'text': '1000000', 'color': 'secondary'}],
			[{'text': '2000000', 'color': 'primary'}, {'text': '5000000', 'color': 'primary'}],
			[{'text': '10000000', 'color': 'positive'}, {'text': '50000000', 'color': 'positive'}],
			[{'text': '–ù–∞–∑–∞–¥', 'color': 'negative'}]]
pvk_kb = keyboard_gen(pvk_list, one_time=True)

nzd_list = [[{'text': '–ù–∞–∑–∞–¥', 'color': 'negative'}]]
nzd_kb = keyboard_gen(nzd_list, one_time=True)

"""LONGPOLL"""
bot = Bot('',  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω group_id, –ù–ï–ó–ê–ë–£–î–¨ –≤–∫–ª—é—á–∏—Ç—å Longpoll
		  group_id=,
		  debug=True)


@bot.on.pre_process()  # registration
async def autoreg(ans: Message):
	if ans.peer_id < 2e9:
		cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
		result = cc.fetchall()

		if len(result) >= 1:
			pass

		else:
			cc.execute(f"SELECT * FROM global")
			gresult = cc.fetchall()
			pid = gresult[0][0]
			pid += 1
			cc.execute("INSERT INTO users (vkid, pid, blnc, bant)"
					   f"VALUES ('{ans.from_id}', '{pid}', '100', '0')"
					   )
			cc.execute(f"UPDATE global SET allusers = {pid}")
			connection.commit()

			main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: 100', 'color': 'secondary'}],
						  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
						   {'text': '‚¨Ü', 'color': 'primary'}],
						  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

			main_kb = keyboard_gen(main_listb, one_time=False)
			await ans('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VCuti!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ Nvuti –Ω–∞ VKCoinsüí≤\n–û–∑–Ω–∞–∫–æ–º—å—Å—è —Åüëá\n'
					  '–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è -  üìÉ\n'
					  '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±–æ—Ç–∞ -  ‚Ñπ', keyboard=main_kb)

			with open("rlist.txt", "r", encoding="UTF-8") as f:
				peers = list(ast.literal_eval(f.read()))
			list.append(peers, ans.from_id)
			with open("rlist.txt", "w") as f:
				f.write(f"{peers}")



@bot.on.message(text=['–ù–∞—á–∞—Ç—å', '–ù–∞–∑–∞–¥'], lower=True)
async def strt(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans('...', keyboard=main_kb)


@bot.on.message(text=['–ò–≥—Ä–∞—Ç—å‚ñ∂', '–ò–≥—Ä–∞—Ç—å'], lower=True)
async def play_inst(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans(
		'–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—Éüëáüèª\n–ù–≤—É—Ç–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –º–µ–Ω—å—à–µ(1), –±–æ–ª—å—à–µ(2) —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏\n'
		'–ü—Ä–∏–º–µ—Ä: –ù–≤—É—Ç–∏ 70 1 100', keyboard=main_kb)


@bot.on.message(text=['‚¨á', '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'], lower=True)
async def pblnc(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans('–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ\n\n–ö–æ–º–º–∏—Å–∏—è 5%', keyboard=main_kb) # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã!!!


@bot.on.message(text='‚¨Ü')
@bot.on.message(text='–í—ã–≤–µ—Å—Ç–∏')
@bot.on.message(text='–≤—ã–≤–µ—Å—Ç–∏')
async def vblnc(ans: Message):
	await ans('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞\n–ö–æ–º–º–∏—Å–∏—è 5%', keyboard=pvk_kb)
	return Branch('vblnc')


@bot.branch.simple_branch('vblnc')
async def vbranch(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]
	cc.execute(f"SELECT * FROM global")
	ccm = cc.fetchall()[0][1]
	if ans.text.lower() == '–ù–∞–∑–∞–¥':
		main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
					  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
					   {'text': '‚¨Ü', 'color': 'primary'}],
					  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

		main_kb = keyboard_gen(main_listb, one_time=False)
		await ans('...', keyboard=main_kb)
		return ExitBranch()

	else:

		try:
			sum = int(ans.text.lower())
			if sum <= blnc:
				ccm += sum * 0.05
				amount = sum - sum * 0.05
				amount *= 1000
				merchant.send_payment(ans.from_id, amount)
				blnc -= sum
				blnc = round(blnc, 2)
				cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
				cc.execute(f"UPDATE global SET comcoins = {ccm}")
				connection.commit()

				main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
							  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
							   {'text': '‚¨Ü', 'color': 'primary'}],
							  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
							   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

				main_kb = keyboard_gen(main_listb, one_time=False)
				await ans('–ì–æ—Ç–æ–≤–æ‚úîÔ∏è', keyboard=main_kb)
				return ExitBranch()

			else:
				main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
							  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
							   {'text': '‚¨Ü', 'color': 'primary'}],
							  {{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
							   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}}]

				main_kb = keyboard_gen(main_listb, one_time=False)
				await ans('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ‚ùå', keyboard=main_kb)
				return ExitBranch()

		except Exception as e:
			print(f'{e}')
			main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
						  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
						   {'text': '‚¨Ü', 'color': 'primary'}
						   ],
						  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]
			main_kb = keyboard_gen(main_listb, one_time=False)
			await ans('...', keyboard=main_kb)
			return ExitBranch()


@bot.on.message(text='üóÑ–†–µ–∑–µ—Ä–≤üóÑ')
@bot.on.message(text='–†–µ–∑–µ—Ä–≤')
@bot.on.message(text='—Ä–µ–∑–µ—Ä–≤')
async def mrezerv(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]
	rzrv = merchant.get_balance(520369348, 520369348)
	rzrv = rzrv['520369348']
	rzrv /= 1000

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans(f'üóÑ–†–µ–∑–µ—Ä–≤ –±–æ—Ç–∞ - {rzrv}üóÑ', keyboard=main_kb)


@bot.on.message(text='üÜò–†–µ–ø–æ—Ä—ÇüÜò')
@bot.on.message(text='–†–µ–ø–æ—Ä—Ç')
@bot.on.message(text='—Ä–µ–ø–æ—Ä—Ç')
async def srepbrnch(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	rbs = cc.fetchall()[0][6]
	if rbs == 1.0:
		await ans('–î–ª—è –≤–∞—Å —Ä–µ–ø–æ—Ä—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚ö†Ô∏è')

	elif rbs >= 2.0:
		ntime = time.time()
		if ntime >= rbs:
			cc.execute(f"UPDATE users SET rban = '0' WHERE vkid = {ans.from_id}")
			connection.commit()
			await ans('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞–∑–∞–¥"', keyboard=nzd_kb)
			return Branch('repbrnch')

		else:
			await ans('–î–ª—è –≤–∞—Å —Ä–µ–ø–æ—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚ö†Ô∏è')

	else:
		await ans('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ù–∞–∑–∞–¥"', keyboard=nzd_kb)
		return Branch('repbrnch')


@bot.branch.simple_branch('repbrnch')
async def repbrnch(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	blnc = cc.fetchall()[0][2]
	if ans.text.lower() == '–ù–∞–∑–∞–¥'\
			or ans.text.lower() == '–Ω–∞–∑–∞–¥':

		main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
					  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
					   {'text': '‚¨Ü', 'color': 'primary'}],
					  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

		main_kb = keyboard_gen(main_listb, one_time=False)
		await ans('...', keyboard=main_kb)
		return ExitBranch()

	else:

		main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
					  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
					   {'text': '‚¨Ü', 'color': 'primary'}],
					  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

		main_kb = keyboard_gen(main_listb, one_time=False)
		await ans('–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∞–ø–ø–∞—Ä—Ç–æ–≤', keyboard=main_kb)
		user = await bot.api.users.get(user_ids=ans.from_id)
		user_n = user[0].first_name
		user_name = f'@id{ans.from_id} ({user_n})'
		await bot.api.messages.send(peer_id=2000000001, random_id=0,
									message=f'üÜòReportüÜò\n–û—Ç {user_name}\nID VK: {ans.from_id}\n–¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞:\n{ans.text.lower()}'
									)
		return ExitBranch()


@bot.on.message(text='–ù–≤—É—Ç–∏ <prc:float> <b_or_m:int> <sst:float>', lower=True) # –ó–¥–µ—Å—å –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
async def play_nvuti(ans: Message, prc, b_or_m, sst):						   # –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞—Å—Å–∞–º–∏ –∏ —Ç.–¥.
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	result = cc.fetchall()
	blnc = result[0][2]
	aablnc = blnc + 1
	prcc = 10000
	prcc *= prc

	cc.execute("SELECT * FROM global")
	lpdk = cc.fetchall()[0][2]
	t1o4 = random.randint(1, lpdk)
	prc = round(prc, 2)
	sst = round(sst, 2)

	if prc <= 95.0:

		if prc >= 1.0:

			if sst >= float(aablnc):
				main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
							  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
							   {'text': '‚¨Ü', 'color': 'primary'}],
							  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
							   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

				main_kb = keyboard_gen(main_listb, one_time=False)
				await ans('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!', keyboard=main_kb)

			elif t1o4 == 1:  # –ø–æ–¥–∫—Ä—É—Ç–∫–∞
				if b_or_m == 1:  # –º–µ–Ω—å—à–µ –ø–æ–¥–∫—Ä—É—Ç–∫–∞
					pcount = random.randint(prcc, 999999)
					blnc -= sst
					blnc = round(blnc, 2)
					cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
					connection.commit()

					nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'negative'}],
								   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
								   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
									{'text': '‚¨Ü', 'color': 'primary'}],
								   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
									{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

					nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
					await ans(f'–°–æ–∂–∞–ª–µ—é! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üò≠\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
							  keyboard=nvuti_kb)

				elif b_or_m == 2:  # –±–æ–ª—å—à–µ –ø–æ–¥–∫—Ä—É—Ç–∫–∞
					pcount = random.randint(0, prcc)
					blnc -= sst
					blnc = round(blnc, 2)
					cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
					connection.commit()

					nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'negative'}],
								   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
								   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
									{'text': '‚¨Ü', 'color': 'primary'}],
								   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
									{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

					nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
					await ans(f'–°–æ–∂–∞–ª–µ—é! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üò≠\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
							  keyboard=nvuti_kb)

				else:
					main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
								  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
								   {'text': '‚¨Ü', 'color': 'primary'}],
								  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
								   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

					main_kb = keyboard_gen(main_listb, one_time=False)
					await ans('–û—à–∏–±–∫–∞!‚ùå\n–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ(1) –∏–ª–∏ –±–æ–ª—å—à–µ(2)‚ùó',
							  keyboard=main_kb)
			else:  # –Ω–µ–ø–æ–¥–∫—Ä—É—Ç–∫–∞
				pcount = random.randint(0, 999999)
				if b_or_m == 1:  # –º–µ–Ω—å—à–µ

					if pcount <= prcc:
						osst = sst / prc
						osst *= 100
						osst -= sst
						blnc += osst
						blnc = round(blnc, 2)
						cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
						connection.commit()

						nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'positive'}],
									   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
									   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
										{'text': '‚¨Ü', 'color': 'primary'}],
									   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
										{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

						nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
						await ans(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏üéâ\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
								  keyboard=nvuti_kb)

					elif pcount >= prcc:
						blnc -= sst
						blnc = round(blnc, 2)
						cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
						connection.commit()

						nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'negative'}],
									   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
									   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
										{'text': '‚¨Ü', 'color': 'primary'}],
									   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
										{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

						nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
						await ans(f'–°–æ–∂–∞–ª–µ—é! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üò≠\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
								  keyboard=nvuti_kb)

					else:
						main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
									  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
									   {'text': '‚¨Ü', 'color': 'primary'}],
									  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
									   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]
						main_kb = keyboard_gen(main_listb, one_time=False)
						await ans(
							'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ä–µ–ø–æ—Ä—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π #–±–∞–≥\n–ö–æ–¥ –æ—à–∏–±–∫–∏: –ß–∏—Å–ª–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏',
							keyboard=main_kb)

				elif b_or_m == 2:
					prcc = 999999 - prcc
					if pcount >= prcc:
						osst = sst / prc
						osst *= 100
						osst -= sst
						blnc += osst
						blnc = round(blnc, 2)
						cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
						connection.commit()

						nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'positive'}],
									   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
									   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
										{'text': '‚¨Ü', 'color': 'primary'}],
									   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
										{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

						nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
						await ans(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏üéâ\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
								  keyboard=nvuti_kb)

					elif pcount <= prcc:
						blnc -= sst
						blnc = round(blnc, 2)
						cc.execute(f"UPDATE users SET blnc = {blnc} WHERE vkid = {ans.from_id}")
						connection.commit()

						nvuti_listb = [[{'text': f'–ù–≤—É—Ç–∏ {prc} {b_or_m} {sst}', 'color': 'negative'}],
									   [{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
									   [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
										{'text': '‚¨Ü', 'color': 'primary'}],
									   [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
										{'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

						nvuti_kb = keyboard_gen(nvuti_listb, one_time=False)
						await ans(f'–°–æ–∂–∞–ª–µ—é! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏üò≠\n–í–∞—à –±–∞–ª–∞–Ω—Å - {blnc}üí∞\n–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ - {pcount}üé≤',
								  keyboard=nvuti_kb)

					else:
						await ans(
							'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞‚ùå\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ä–µ–ø–æ—Ä—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π #–±–∞–≥\n–ö–æ–¥ –æ—à–∏–±–∫–∏: –ß–∏—Å–ª–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏')
				else:
					main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
								  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
								   {'text': '‚¨Ü', 'color': 'primary'}],
								  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
								   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

					main_kb = keyboard_gen(main_listb, one_time=False)
					await ans('–û—à–∏–±–∫–∞!‚ùå\n–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ(1) –∏–ª–∏ –±–æ–ª—å—à–µ(2)‚ùó',
							  keyboard=main_kb)
		else:
			main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
						  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
						   {'text': '‚¨Ü', 'color': 'primary'}],
						  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
						   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]
			main_kb = keyboard_gen(main_listb, one_time=False)
			await ans('–û—à–∏–±–∫–∞!‚ùå\n–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 1 –¥–æ 95)‚ùó', keyboard=main_kb)
	else:

		main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
					  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
					   {'text': '‚¨Ü', 'color': 'primary'}],
					  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'},
					   {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

		main_kb = keyboard_gen(main_listb, one_time=False)
		await ans('–û—à–∏–±–∫–∞!‚ùå\n–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç (–æ—Ç 1 –¥–æ 95)‚ùó', keyboard=main_kb)


@bot.on.message(text='–ë–∞–ª–∞–Ω—Å: <arg:float>')
async def dnb(ans: Message, arg):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	result = cc.fetchall()
	blnc = result[0][2]

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans(f'–≠—Ç–æ –≤–∞—à –±–∞–ª–∞–Ω—Å\n–û–Ω —Ä–∞–≤–µ–Ω {arg}', keyboard=main_kb)


# =
@bot.on.message(text='!–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è', lower=True) # Start mailing commands
async def unsubscribe_mailing(ans: Message):
	with open("rlist.txt", "r", encoding="UTF-8") as f:
		peers = list(ast.literal_eval(f.read()))

	if ans.from_id in peers:

		list.remove(peers, ans.from_id)
		with open("rlist.txt", "w") as f:
			f.write(f"{peers}")

		await ans('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!\n'
				  '–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n'
				  '[0] - –ù–∞–∑–∞–¥üîô', keyboard=on_kb)

	else:
		await ans('–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!\n'
				  '–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n'
				  '[0] - –ù–∞–∑–∞–¥üîô', keyboard=on_kb)


@bot.on.message(text='!–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', lower=True)
async def subcribe_mailing(ans: Message):
	with open("rlist.txt", "r", encoding="UTF-8") as f:
		peers = list(ast.literal_eval(f.read()))

	if ans.from_id in peers:
		await ans('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n'
				  '–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n'
				  '[0] - –ù–∞–∑–∞–¥üîô', keyboard=on_kb)

	else:
		list.append(peers, ans.from_id)
		with open("rlist.txt", "w") as file:
			file.write(f"{peers}")

		await ans('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n'
				  '–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n'
				  '[0] - –ù–∞–∑–∞–¥üîô', keyboard=on_kb) # End mailing commands


@bot.on.message(text='admin commands', lower=True) # Start admin commands
async def admcom(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	adm = cc.fetchall()[0][5]

	if ans.from_id == owner_vkid:
		await ans('–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ãüìÉ:\n'
				  '1) set blnc <zn:int> <ida:int> - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å, ida - Vkid\n'
				  '2)/id User - –£–∑–Ω–∞—Ç—å Vkid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
				  '3) set pdkrtk zn - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–∫—Ä—É—Ç–∫–∏\n' # –ß–µ–º –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–¥–∫—Ä—É—Ç–∫–∞ (–æ—Ç 1 –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏)
				  '4) set adm zn ida - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
				  '5) /delkeyboard - –£–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–µ—Å–µ–¥–µ\n'
				  '6) set rban <zn:int> <ida:int> - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç zn - 1=–Ω–∞–≤—Å–µ–≥–¥–∞, –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö\n'
				  '7) mailing <text> - –†–∞—Å—Å—ã–ª–∫–∞'
				  )

	elif adm == 1:
		await ans('–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ãüìÉ:\n'
				  '1) set blnc <zn:int> <ida:int> - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å, ida - Vkid\n'
				  '2)/id User - –£–∑–Ω–∞—Ç—å Vkid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
				  '3) set rban <zn:int> <ida:int> - –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç zn - 1=–Ω–∞–≤—Å–µ–≥–¥–∞, –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö'
				  )

	else:
		pass



@bot.on.message(text='set blnc <zn:int> <ida:int>', lower=True)
async def setbalance(ans: Message, zn, ida):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	adm = cc.fetchall()[0][5]
	if adm == 1:

		try:
			cc.execute(f"UPDATE users SET blnc = {zn} WHERE vkid = {ida}")
			connection.commit()
			await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\nVkid - {ida}, zn - {zn}üìÉ')

		except Exception as e:
			await ans('–û—à–∏–±–∫–∞‚ùó\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ set blnc vkid znüìÉ'
					  f'–ö–æ–¥ –æ—à–∏–±–∫–∏ - {e}')

	else:
		pass


@bot.on.message(text='set pdkrtk <zn:int>', lower=True)
async def setpdkrtk(ans: Message, zn):
	if ans.from_id == owner_vkid:
		cc.execute(f"UPDATE global SET pdkrtk = {zn}")
		connection.commit()
		await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\nzn - {zn}üìÉ')


@bot.on.message(text='set adm <zn:int> <ida:int>', lower=True)
async def setadm(ans: Message, zn, ida):
	if ans.from_id == owner_vkid:

		try:

			if zn == 1:
				cc.execute(f"UPDATE users SET adm = '1' WHERE vkid = {ida}")
				connection.commit()
				await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\n{ida} —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')

			elif zn == 0:
				cc.execute(f"UPDATE users SET adm = '0' WHERE vkid = {ida}")
				connection.commit()
				await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\n{ida} —Å–Ω—è—Ç —Å –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')

			else:
				await ans('–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏‚ùó\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏–±–æ 1(+ –∞–¥–º) –ª–∏–±–æ 2(-–∞–¥–º)üìÉ')


		except Exception as e:
			await ans('–û—à–∏–±–∫–∞‚ùó\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ set adm zn vkidüìÉ\n'
					  f'–ö–æ–¥ –æ—à–∏–±–∫–∞ - {e}')
	else:
		pass


@bot.on.chat_message(text='/id User', lower=True)
async def know_id(ans: Message):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	adm = cc.fetchall()[0][5]
	if adm == 1:
		cc.execute(f"SELECT * FROM users WHERE vkid = {ans.reply_message.from_id}")
		pid = cc.fetchall[0][1]

		await ans('ID This user in VK')
		await ans(f'{ans.reply_message.from_id}')
		await ans('PID') # Player ID
		await ans(f'{pid}')

	else:
		pass


@bot.on.message(text='otvet <ida:int> <arg>')
@bot.on.chat_message(text='/otvet <ida:int> <arg>')
async def ans_rep(ans: Message, ida, arg): # Answer on report
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	adm = cc.fetchall()[0][5]
	if adm == 1:

		try:
			await ans(f'Ready‚úÖ\n–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n ID VK = {ida}\n Text = {arg}')
			user = await bot.api.users.get(user_ids=ida)
			user_n = user[0].first_name
			user_name = f'@id{ans.from_id} ({user_n})'
			await bot.api.messages.send(peer_id={ida}, random_id=0,
										message=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {user_name}!\n–ù–∞ –≤–∞—à —Ä–µ–ø–æ—Ä—Ç –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç: {arg}')

		except Exception as e:
			await ans(f'–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã: otvet <ida> <arg>')
			await ans(f'–ö–æ–¥ –æ—à–∏–±–∫–∏ - {e}')

	else:
		pass

@bot.on.chat_message(text='/delkeyboard', lower=True)
async def dlkb(ans: Message):
	if ans.from_id == 267023627:
		await ans('ok', keyboard=nzd_kb)

	else:
		pass


@bot.on.message(text='set rban <zn:int> <ida:int>', lower=True)
async def setrban(ans: Message, zn, ida):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	adm = cc.fetchall()[0][5]
	if adm == 1:

		try:
			if zn == 1:
				cc.execute(f"UPDATE users SET rban = '1' WHERE vkid = {ida}")
				connection.commit()
				await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\n{ida} –ø–æ–ª—É—á–∏–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞–≤—Å–µ–≥–¥–∞')

			elif zn == 0:
				cc.execute(f"UPDATE users SET rban = '0' WHERE vkid = {ida}")
				connection.commit()
				await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\n{ida} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç')

			else:
				btime = time.time()
				btime += zn * 60
				cc.execute(f"UPDATE users SET rban = {btime} WHERE vkid = {ida}")
				connection.commit()
				await ans(f'Ready‚úÖ\n–î–∞–Ω–Ω—ã–µ:\n{ida} –ø–æ–ª—É—á–∏–ª –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ {zn} –º–∏–Ω—É—Ç')

		except Exception as e:
			await ans('–û—à–∏–±–∫–∞‚ùó\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ set rban zn vkidüìÉ\n'
					  f'–ö–æ–¥ –æ—à–∏–±–∫–∞ - {e}')

	else:
		pass


@bot.on.message(text='mailing <text>', lower=True)
async def mailing(ans: Message, text):
	if ans.from_id == owner_vkid:
		await ans('Started...')
		with open("rlist.txt", "r", encoding="UTF-8") as f:
			peers = list(ast.literal_eval(f.read()))

		for peer in peers:

			try:
				await bot.api.messages.send(user_id=peer, random_id=0, message=f"üì¢–†–∞—Å—Å—ã–ª–æ—á–∫–∞:üì¢\n{text}\n"
																			   "–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
																			   "–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ - !–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n")
			except Exception as e:
				await ans('–û—à–∏–±–∫–∞‚ùó'
						  f'–ö–æ–¥ –æ—à–∏–±–∫–∞ - {e}')

	else:
		pass # end admin commands


@bot.on.message(text='<arg>') # Not found handler
async def nfa(ans: Message, arg):
	cc.execute(f"SELECT * FROM users WHERE vkid = {ans.from_id}")
	result = cc.fetchall()
	blnc = result[0][2]

	main_listb = [[{'text': f'–ë–∞–ª–∞–Ω—Å: {blnc}', 'color': 'secondary'}],
				  [{'text': '‚¨á', 'color': 'primary'}, {'text': '–ò–≥—Ä–∞—Ç—å‚ñ∂', 'color': 'negative'},
				   {'text': '‚¨Ü', 'color': 'primary'}],
				  [{'text': 'üóÑ–†–µ–∑–µ—Ä–≤üóÑ', 'color': 'negative'}, {'text': 'üÜò–†–µ–ø–æ—Ä—ÇüÜò', 'color': 'negative'}]]

	main_kb = keyboard_gen(main_listb, one_time=False)
	await ans(f'"{arg}", —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?üßê –ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è!üôÅ\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—ã –≤–µ—Ä–Ω–æüí≠',
			  keyboard=main_kb)


bot.run_polling()
